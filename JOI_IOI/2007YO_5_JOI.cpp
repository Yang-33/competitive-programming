#include <iostream>
#include <vector>
using namespace std;

typedef long long ll;
#define FOR(i, s, e) for (ll(i) = (s); (i) < (e); (i)++)
#define debug(x) cout << #x << ": " << x << endl
/* -----  2017/03/27  Problem: JOI莠磯∈2007 5  / Link: http://www.ioi-jp.org/joi/2006/2007-yo-prob_and_sol/2007-yo-problems/2007-yo-t5/2007-yo-t5.html  ----- */
/* ------蝠城｡

あなたはある機械の製造工場で品質管理の責任者をしている． この機械には， 部品として電源とモーターとケーブルが必要である． 
製造工場には電源が a 個， モーターが b 個， ケーブルが c 個あり， それぞれ 1 から a まで， a+1 から a+b まで， a+b+1 から a+b+c までの番号が付いている．
困ったことに， 部品の中に故障しているものがあるかもしれない． 工場ではどの部品が故障していてどの部品が正常であるかを知りたい．

そこで， 工場では次の方法で部品を検査した． 電源とモーターとケーブルを１つずつ持ってきてつなぎ， 動作させてみる． 
このとき， ３つの部品がすべて正常であるときは正しく動作して「合格」とわかる． ３つの中に故障している部品が１つでも入っているときは正しく動作しないので「不合格」とわかる． （
工場で作っている機械はとても精密なので， 故障した部品がまざっているのに偶然正しく動作してしまうなどということは起きないのだ．）

あなたには検査結果のリストが渡される． 検査結果のリストの各行には， 検査に使った電源とモーターとケーブルの番号と， 検査が合格だったか不合格だったかが書かれている．

検査結果のリストが与えられたとき， すべての部品を， 検査結果から確実に故障しているとわかる部品と， 確実に正常とわかる部品と，
検査結果からは故障しているとも正常であるとも決まらない部品に分類するプログラムを作成せよ．

-----問題ここまで----- */
/* -----解説等-----

検査結果が正しいものは、そこで使われたモノたちがすべて正常なものとなる。
結果は正しくないが二つが正常である場合は残りの一つが欠品であると断定できるのでこれを正しくないものとする。
jloopはいらないね！
ここで配列を a[3][1000]ともてるとモテます(？)

----解説ここまで---- */


int main() {
  cin.tie(0);
  ios_base::sync_with_stdio(false);

  int s[400];
  int x[1010];
  int y[1010];
  int z[1010];
  vector<int >v;
  int a, b, c, n; cin >> a >> b >> c >> n;
  FOR(i, 0, 400)s[i] = 2;

  FOR(i, 0, n) {
      int p;
      cin >> x[i] >> y[i] >> z[i] >> p;
      x[i]--; y[i]--; z[i]--;
      if (p == 1) {
          s[x[i]] = 1;
          s[y[i]] = 1;
          s[z[i]] = 1;
      }
      else v.push_back(i);
  }

  //FOR(j,0,v.size())
  FOR(ii, 0, v.size()) {
      int i = v[ii];
      if (s[x[i]] == 1 && s[y[i]] == 1)s[z[i]] = 0;
      else if (s[x[i]] == 1 && s[z[i]] == 1)s[y[i]] = 0;
      else if (s[z[i]] == 1 && s[y[i]] == 1)s[x[i]] = 0;
  }

  FOR(i, 0, a+b+c)
  cout << s[i] << endl;

  return 0;
}
