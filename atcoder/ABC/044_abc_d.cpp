#include<iostream>
#include<string>
using namespace std;

#define FOR(i,s,e) for(ll (i)=(s);(i)<(e);(i)++)
typedef long long ll;

/* 2017/01/21 問題 -----  ABC044 D /Link http://abc043.contest.atcoder.jp/tasks/arc059_b */
/* -----解説等-----
問題: 文字列 t について、t の長さが 2 以上であり、かつ t の中の文字のうち過半数が同じ文字であるとき、t をアンバランスであると呼ぶことにします。
例えば、voodoo や melee はアンバランスであり、noon や a はアンバランスではありません。

小文字のアルファベットからなる文字列 s が与えられます。
s にアンバランスな (連続する) 部分文字列が存在するか判定してください。
存在する場合は、s の中でそのような部分文字列が存在する位置を一つ示してください。

制約
2≦|s|≦105
s は小文字のアルファベットのみからなる。

出力
s にアンバランスな部分文字列が存在しない場合は、-1 -1 と出力せよ。
s にアンバランスな部分文字列が存在する場合は、そのような部分文字列の一つを sa,sa+1,…sb (1≦a<b≦|s|) として、a b と出力せよ。
そのような部分文字列が複数存在する場合は、いずれも正解とみなされる。

アンバランスな部分文字列を発見する際、過半数が同じ文字であることは上手く2文字削減しても
アンバランスな部分文字列が存在するか取り除いた連続した2文字がアンバランスそのものかであるから
これは部分問題に帰着できる。
したがって2文字か3文字かの範囲を見ればOK.

*/

string S;

int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);

    cin >> S;

    FOR(i, 1, S.size()) {
        if (S[i - 1] == S[i]) {
            cout << i << " " << i + 1 << endl;
            return 0;
        }
        else if (i > 1) {
            if (S[i - 2] == S[i]) {
                cout << i - 1 << " " << i + 1 << endl;
                return 0;
            }
        }

    }
    cout << -1 << " " << -1 << endl;

    return 0;
}